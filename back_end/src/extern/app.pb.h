// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_app_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_app_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_app_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_app_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_app_2eproto;
namespace app {
class IsOK;
struct IsOKDefaultTypeInternal;
extern IsOKDefaultTypeInternal _IsOK_default_instance_;
class Question;
struct QuestionDefaultTypeInternal;
extern QuestionDefaultTypeInternal _Question_default_instance_;
class Questions;
struct QuestionsDefaultTypeInternal;
extern QuestionsDefaultTypeInternal _Questions_default_instance_;
class Record;
struct RecordDefaultTypeInternal;
extern RecordDefaultTypeInternal _Record_default_instance_;
class RequestQuestions;
struct RequestQuestionsDefaultTypeInternal;
extern RequestQuestionsDefaultTypeInternal _RequestQuestions_default_instance_;
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace app
PROTOBUF_NAMESPACE_OPEN
template<> ::app::IsOK* Arena::CreateMaybeMessage<::app::IsOK>(Arena*);
template<> ::app::Question* Arena::CreateMaybeMessage<::app::Question>(Arena*);
template<> ::app::Questions* Arena::CreateMaybeMessage<::app::Questions>(Arena*);
template<> ::app::Record* Arena::CreateMaybeMessage<::app::Record>(Arena*);
template<> ::app::RequestQuestions* Arena::CreateMaybeMessage<::app::RequestQuestions>(Arena*);
template<> ::app::User* Arena::CreateMaybeMessage<::app::User>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace app {

// ===================================================================

class IsOK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:app.IsOK) */ {
 public:
  inline IsOK() : IsOK(nullptr) {}
  ~IsOK() override;
  explicit PROTOBUF_CONSTEXPR IsOK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IsOK(const IsOK& from);
  IsOK(IsOK&& from) noexcept
    : IsOK() {
    *this = ::std::move(from);
  }

  inline IsOK& operator=(const IsOK& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsOK& operator=(IsOK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IsOK& default_instance() {
    return *internal_default_instance();
  }
  static inline const IsOK* internal_default_instance() {
    return reinterpret_cast<const IsOK*>(
               &_IsOK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IsOK& a, IsOK& b) {
    a.Swap(&b);
  }
  inline void Swap(IsOK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsOK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IsOK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IsOK>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IsOK& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IsOK& from) {
    IsOK::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsOK* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "app.IsOK";
  }
  protected:
  explicit IsOK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:app.IsOK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2eproto;
};
// -------------------------------------------------------------------

class RequestQuestions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:app.RequestQuestions) */ {
 public:
  inline RequestQuestions() : RequestQuestions(nullptr) {}
  ~RequestQuestions() override;
  explicit PROTOBUF_CONSTEXPR RequestQuestions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestQuestions(const RequestQuestions& from);
  RequestQuestions(RequestQuestions&& from) noexcept
    : RequestQuestions() {
    *this = ::std::move(from);
  }

  inline RequestQuestions& operator=(const RequestQuestions& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestQuestions& operator=(RequestQuestions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestQuestions& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestQuestions* internal_default_instance() {
    return reinterpret_cast<const RequestQuestions*>(
               &_RequestQuestions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestQuestions& a, RequestQuestions& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestQuestions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestQuestions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestQuestions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestQuestions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestQuestions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestQuestions& from) {
    RequestQuestions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestQuestions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "app.RequestQuestions";
  }
  protected:
  explicit RequestQuestions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 3,
    kIsAnsweredFieldNumber = 1,
    kForUserFieldNumber = 2,
  };
  // string userId = 3;
  void clear_userid();
  const std::string& userid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // bool is_answered = 1;
  void clear_is_answered();
  bool is_answered() const;
  void set_is_answered(bool value);
  private:
  bool _internal_is_answered() const;
  void _internal_set_is_answered(bool value);
  public:

  // bool for_user = 2;
  void clear_for_user();
  bool for_user() const;
  void set_for_user(bool value);
  private:
  bool _internal_for_user() const;
  void _internal_set_for_user(bool value);
  public:

  // @@protoc_insertion_point(class_scope:app.RequestQuestions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
    bool is_answered_;
    bool for_user_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2eproto;
};
// -------------------------------------------------------------------

class User final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:app.User) */ {
 public:
  inline User() : User(nullptr) {}
  ~User() override;
  explicit PROTOBUF_CONSTEXPR User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const User& from) {
    User::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "app.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestionsIDFieldNumber = 4,
    kNameFieldNumber = 1,
    kTokenFieldNumber = 2,
    kIsAnswererFieldNumber = 3,
  };
  // repeated string questionsID = 4;
  int questionsid_size() const;
  private:
  int _internal_questionsid_size() const;
  public:
  void clear_questionsid();
  const std::string& questionsid(int index) const;
  std::string* mutable_questionsid(int index);
  void set_questionsid(int index, const std::string& value);
  void set_questionsid(int index, std::string&& value);
  void set_questionsid(int index, const char* value);
  void set_questionsid(int index, const char* value, size_t size);
  std::string* add_questionsid();
  void add_questionsid(const std::string& value);
  void add_questionsid(std::string&& value);
  void add_questionsid(const char* value);
  void add_questionsid(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& questionsid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_questionsid();
  private:
  const std::string& _internal_questionsid(int index) const;
  std::string* _internal_add_questionsid();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string token = 2;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // bool is_answerer = 3;
  void clear_is_answerer();
  bool is_answerer() const;
  void set_is_answerer(bool value);
  private:
  bool _internal_is_answerer() const;
  void _internal_set_is_answerer(bool value);
  public:

  // @@protoc_insertion_point(class_scope:app.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> questionsid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    bool is_answerer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2eproto;
};
// -------------------------------------------------------------------

class Question final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:app.Question) */ {
 public:
  inline Question() : Question(nullptr) {}
  ~Question() override;
  explicit PROTOBUF_CONSTEXPR Question(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Question(const Question& from);
  Question(Question&& from) noexcept
    : Question() {
    *this = ::std::move(from);
  }

  inline Question& operator=(const Question& from) {
    CopyFrom(from);
    return *this;
  }
  inline Question& operator=(Question&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Question& default_instance() {
    return *internal_default_instance();
  }
  static inline const Question* internal_default_instance() {
    return reinterpret_cast<const Question*>(
               &_Question_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Question& a, Question& b) {
    a.Swap(&b);
  }
  inline void Swap(Question* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Question* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Question* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Question>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Question& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Question& from) {
    Question::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Question* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "app.Question";
  }
  protected:
  explicit Question(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kContentFieldNumber = 2,
    kIdFieldNumber = 3,
    kAnswerFieldNumber = 6,
    kCategoryFieldNumber = 4,
    kAnsweredFieldNumber = 5,
  };
  // string title = 1;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string id = 3;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string answer = 6;
  void clear_answer();
  const std::string& answer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_answer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_answer();
  PROTOBUF_NODISCARD std::string* release_answer();
  void set_allocated_answer(std::string* answer);
  private:
  const std::string& _internal_answer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_answer(const std::string& value);
  std::string* _internal_mutable_answer();
  public:

  // int32 category = 4;
  void clear_category();
  int32_t category() const;
  void set_category(int32_t value);
  private:
  int32_t _internal_category() const;
  void _internal_set_category(int32_t value);
  public:

  // bool answered = 5;
  void clear_answered();
  bool answered() const;
  void set_answered(bool value);
  private:
  bool _internal_answered() const;
  void _internal_set_answered(bool value);
  public:

  // @@protoc_insertion_point(class_scope:app.Question)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr answer_;
    int32_t category_;
    bool answered_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2eproto;
};
// -------------------------------------------------------------------

class Questions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:app.Questions) */ {
 public:
  inline Questions() : Questions(nullptr) {}
  ~Questions() override;
  explicit PROTOBUF_CONSTEXPR Questions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Questions(const Questions& from);
  Questions(Questions&& from) noexcept
    : Questions() {
    *this = ::std::move(from);
  }

  inline Questions& operator=(const Questions& from) {
    CopyFrom(from);
    return *this;
  }
  inline Questions& operator=(Questions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Questions& default_instance() {
    return *internal_default_instance();
  }
  static inline const Questions* internal_default_instance() {
    return reinterpret_cast<const Questions*>(
               &_Questions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Questions& a, Questions& b) {
    a.Swap(&b);
  }
  inline void Swap(Questions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Questions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Questions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Questions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Questions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Questions& from) {
    Questions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Questions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "app.Questions";
  }
  protected:
  explicit Questions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestionsFieldNumber = 1,
  };
  // repeated .app.Question questions = 1;
  int questions_size() const;
  private:
  int _internal_questions_size() const;
  public:
  void clear_questions();
  ::app::Question* mutable_questions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::app::Question >*
      mutable_questions();
  private:
  const ::app::Question& _internal_questions(int index) const;
  ::app::Question* _internal_add_questions();
  public:
  const ::app::Question& questions(int index) const;
  ::app::Question* add_questions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::app::Question >&
      questions() const;

  // @@protoc_insertion_point(class_scope:app.Questions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::app::Question > questions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2eproto;
};
// -------------------------------------------------------------------

class Record final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:app.Record) */ {
 public:
  inline Record() : Record(nullptr) {}
  ~Record() override;
  explicit PROTOBUF_CONSTEXPR Record(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Record(const Record& from);
  Record(Record&& from) noexcept
    : Record() {
    *this = ::std::move(from);
  }

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }
  inline Record& operator=(Record&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Record& default_instance() {
    return *internal_default_instance();
  }
  static inline const Record* internal_default_instance() {
    return reinterpret_cast<const Record*>(
               &_Record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Record& a, Record& b) {
    a.Swap(&b);
  }
  inline void Swap(Record* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Record* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Record>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Record& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Record& from) {
    Record::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Record* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "app.Record";
  }
  protected:
  explicit Record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 1,
    kQuestionsFieldNumber = 2,
  };
  // repeated .app.User users = 1;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::app::User* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::app::User >*
      mutable_users();
  private:
  const ::app::User& _internal_users(int index) const;
  ::app::User* _internal_add_users();
  public:
  const ::app::User& users(int index) const;
  ::app::User* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::app::User >&
      users() const;

  // repeated .app.Question questions = 2;
  int questions_size() const;
  private:
  int _internal_questions_size() const;
  public:
  void clear_questions();
  ::app::Question* mutable_questions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::app::Question >*
      mutable_questions();
  private:
  const ::app::Question& _internal_questions(int index) const;
  ::app::Question* _internal_add_questions();
  public:
  const ::app::Question& questions(int index) const;
  ::app::Question* add_questions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::app::Question >&
      questions() const;

  // @@protoc_insertion_point(class_scope:app.Record)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::app::User > users_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::app::Question > questions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IsOK

// bool success = 1;
inline void IsOK::clear_success() {
  _impl_.success_ = false;
}
inline bool IsOK::_internal_success() const {
  return _impl_.success_;
}
inline bool IsOK::success() const {
  // @@protoc_insertion_point(field_get:app.IsOK.success)
  return _internal_success();
}
inline void IsOK::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void IsOK::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:app.IsOK.success)
}

// -------------------------------------------------------------------

// RequestQuestions

// bool is_answered = 1;
inline void RequestQuestions::clear_is_answered() {
  _impl_.is_answered_ = false;
}
inline bool RequestQuestions::_internal_is_answered() const {
  return _impl_.is_answered_;
}
inline bool RequestQuestions::is_answered() const {
  // @@protoc_insertion_point(field_get:app.RequestQuestions.is_answered)
  return _internal_is_answered();
}
inline void RequestQuestions::_internal_set_is_answered(bool value) {
  
  _impl_.is_answered_ = value;
}
inline void RequestQuestions::set_is_answered(bool value) {
  _internal_set_is_answered(value);
  // @@protoc_insertion_point(field_set:app.RequestQuestions.is_answered)
}

// bool for_user = 2;
inline void RequestQuestions::clear_for_user() {
  _impl_.for_user_ = false;
}
inline bool RequestQuestions::_internal_for_user() const {
  return _impl_.for_user_;
}
inline bool RequestQuestions::for_user() const {
  // @@protoc_insertion_point(field_get:app.RequestQuestions.for_user)
  return _internal_for_user();
}
inline void RequestQuestions::_internal_set_for_user(bool value) {
  
  _impl_.for_user_ = value;
}
inline void RequestQuestions::set_for_user(bool value) {
  _internal_set_for_user(value);
  // @@protoc_insertion_point(field_set:app.RequestQuestions.for_user)
}

// string userId = 3;
inline void RequestQuestions::clear_userid() {
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& RequestQuestions::userid() const {
  // @@protoc_insertion_point(field_get:app.RequestQuestions.userId)
  return _internal_userid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestQuestions::set_userid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.userid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:app.RequestQuestions.userId)
}
inline std::string* RequestQuestions::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:app.RequestQuestions.userId)
  return _s;
}
inline const std::string& RequestQuestions::_internal_userid() const {
  return _impl_.userid_.Get();
}
inline void RequestQuestions::_internal_set_userid(const std::string& value) {
  
  _impl_.userid_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestQuestions::_internal_mutable_userid() {
  
  return _impl_.userid_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestQuestions::release_userid() {
  // @@protoc_insertion_point(field_release:app.RequestQuestions.userId)
  return _impl_.userid_.Release();
}
inline void RequestQuestions::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  _impl_.userid_.SetAllocated(userid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.userid_.IsDefault()) {
    _impl_.userid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:app.RequestQuestions.userId)
}

// -------------------------------------------------------------------

// User

// string name = 1;
inline void User::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& User::name() const {
  // @@protoc_insertion_point(field_get:app.User.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:app.User.name)
}
inline std::string* User::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:app.User.name)
  return _s;
}
inline const std::string& User::_internal_name() const {
  return _impl_.name_.Get();
}
inline void User::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:app.User.name)
  return _impl_.name_.Release();
}
inline void User::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:app.User.name)
}

// string token = 2;
inline void User::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& User::token() const {
  // @@protoc_insertion_point(field_get:app.User.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:app.User.token)
}
inline std::string* User::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:app.User.token)
  return _s;
}
inline const std::string& User::_internal_token() const {
  return _impl_.token_.Get();
}
inline void User::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_token() {
  // @@protoc_insertion_point(field_release:app.User.token)
  return _impl_.token_.Release();
}
inline void User::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:app.User.token)
}

// bool is_answerer = 3;
inline void User::clear_is_answerer() {
  _impl_.is_answerer_ = false;
}
inline bool User::_internal_is_answerer() const {
  return _impl_.is_answerer_;
}
inline bool User::is_answerer() const {
  // @@protoc_insertion_point(field_get:app.User.is_answerer)
  return _internal_is_answerer();
}
inline void User::_internal_set_is_answerer(bool value) {
  
  _impl_.is_answerer_ = value;
}
inline void User::set_is_answerer(bool value) {
  _internal_set_is_answerer(value);
  // @@protoc_insertion_point(field_set:app.User.is_answerer)
}

// repeated string questionsID = 4;
inline int User::_internal_questionsid_size() const {
  return _impl_.questionsid_.size();
}
inline int User::questionsid_size() const {
  return _internal_questionsid_size();
}
inline void User::clear_questionsid() {
  _impl_.questionsid_.Clear();
}
inline std::string* User::add_questionsid() {
  std::string* _s = _internal_add_questionsid();
  // @@protoc_insertion_point(field_add_mutable:app.User.questionsID)
  return _s;
}
inline const std::string& User::_internal_questionsid(int index) const {
  return _impl_.questionsid_.Get(index);
}
inline const std::string& User::questionsid(int index) const {
  // @@protoc_insertion_point(field_get:app.User.questionsID)
  return _internal_questionsid(index);
}
inline std::string* User::mutable_questionsid(int index) {
  // @@protoc_insertion_point(field_mutable:app.User.questionsID)
  return _impl_.questionsid_.Mutable(index);
}
inline void User::set_questionsid(int index, const std::string& value) {
  _impl_.questionsid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:app.User.questionsID)
}
inline void User::set_questionsid(int index, std::string&& value) {
  _impl_.questionsid_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:app.User.questionsID)
}
inline void User::set_questionsid(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.questionsid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:app.User.questionsID)
}
inline void User::set_questionsid(int index, const char* value, size_t size) {
  _impl_.questionsid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:app.User.questionsID)
}
inline std::string* User::_internal_add_questionsid() {
  return _impl_.questionsid_.Add();
}
inline void User::add_questionsid(const std::string& value) {
  _impl_.questionsid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:app.User.questionsID)
}
inline void User::add_questionsid(std::string&& value) {
  _impl_.questionsid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:app.User.questionsID)
}
inline void User::add_questionsid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.questionsid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:app.User.questionsID)
}
inline void User::add_questionsid(const char* value, size_t size) {
  _impl_.questionsid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:app.User.questionsID)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
User::questionsid() const {
  // @@protoc_insertion_point(field_list:app.User.questionsID)
  return _impl_.questionsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
User::mutable_questionsid() {
  // @@protoc_insertion_point(field_mutable_list:app.User.questionsID)
  return &_impl_.questionsid_;
}

// -------------------------------------------------------------------

// Question

// string title = 1;
inline void Question::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Question::title() const {
  // @@protoc_insertion_point(field_get:app.Question.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Question::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:app.Question.title)
}
inline std::string* Question::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:app.Question.title)
  return _s;
}
inline const std::string& Question::_internal_title() const {
  return _impl_.title_.Get();
}
inline void Question::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Question::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* Question::release_title() {
  // @@protoc_insertion_point(field_release:app.Question.title)
  return _impl_.title_.Release();
}
inline void Question::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:app.Question.title)
}

// string content = 2;
inline void Question::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& Question::content() const {
  // @@protoc_insertion_point(field_get:app.Question.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Question::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:app.Question.content)
}
inline std::string* Question::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:app.Question.content)
  return _s;
}
inline const std::string& Question::_internal_content() const {
  return _impl_.content_.Get();
}
inline void Question::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* Question::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* Question::release_content() {
  // @@protoc_insertion_point(field_release:app.Question.content)
  return _impl_.content_.Release();
}
inline void Question::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:app.Question.content)
}

// string id = 3;
inline void Question::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Question::id() const {
  // @@protoc_insertion_point(field_get:app.Question.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Question::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:app.Question.id)
}
inline std::string* Question::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:app.Question.id)
  return _s;
}
inline const std::string& Question::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Question::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Question::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* Question::release_id() {
  // @@protoc_insertion_point(field_release:app.Question.id)
  return _impl_.id_.Release();
}
inline void Question::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:app.Question.id)
}

// int32 category = 4;
inline void Question::clear_category() {
  _impl_.category_ = 0;
}
inline int32_t Question::_internal_category() const {
  return _impl_.category_;
}
inline int32_t Question::category() const {
  // @@protoc_insertion_point(field_get:app.Question.category)
  return _internal_category();
}
inline void Question::_internal_set_category(int32_t value) {
  
  _impl_.category_ = value;
}
inline void Question::set_category(int32_t value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:app.Question.category)
}

// bool answered = 5;
inline void Question::clear_answered() {
  _impl_.answered_ = false;
}
inline bool Question::_internal_answered() const {
  return _impl_.answered_;
}
inline bool Question::answered() const {
  // @@protoc_insertion_point(field_get:app.Question.answered)
  return _internal_answered();
}
inline void Question::_internal_set_answered(bool value) {
  
  _impl_.answered_ = value;
}
inline void Question::set_answered(bool value) {
  _internal_set_answered(value);
  // @@protoc_insertion_point(field_set:app.Question.answered)
}

// string answer = 6;
inline void Question::clear_answer() {
  _impl_.answer_.ClearToEmpty();
}
inline const std::string& Question::answer() const {
  // @@protoc_insertion_point(field_get:app.Question.answer)
  return _internal_answer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Question::set_answer(ArgT0&& arg0, ArgT... args) {
 
 _impl_.answer_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:app.Question.answer)
}
inline std::string* Question::mutable_answer() {
  std::string* _s = _internal_mutable_answer();
  // @@protoc_insertion_point(field_mutable:app.Question.answer)
  return _s;
}
inline const std::string& Question::_internal_answer() const {
  return _impl_.answer_.Get();
}
inline void Question::_internal_set_answer(const std::string& value) {
  
  _impl_.answer_.Set(value, GetArenaForAllocation());
}
inline std::string* Question::_internal_mutable_answer() {
  
  return _impl_.answer_.Mutable(GetArenaForAllocation());
}
inline std::string* Question::release_answer() {
  // @@protoc_insertion_point(field_release:app.Question.answer)
  return _impl_.answer_.Release();
}
inline void Question::set_allocated_answer(std::string* answer) {
  if (answer != nullptr) {
    
  } else {
    
  }
  _impl_.answer_.SetAllocated(answer, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.answer_.IsDefault()) {
    _impl_.answer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:app.Question.answer)
}

// -------------------------------------------------------------------

// Questions

// repeated .app.Question questions = 1;
inline int Questions::_internal_questions_size() const {
  return _impl_.questions_.size();
}
inline int Questions::questions_size() const {
  return _internal_questions_size();
}
inline void Questions::clear_questions() {
  _impl_.questions_.Clear();
}
inline ::app::Question* Questions::mutable_questions(int index) {
  // @@protoc_insertion_point(field_mutable:app.Questions.questions)
  return _impl_.questions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::app::Question >*
Questions::mutable_questions() {
  // @@protoc_insertion_point(field_mutable_list:app.Questions.questions)
  return &_impl_.questions_;
}
inline const ::app::Question& Questions::_internal_questions(int index) const {
  return _impl_.questions_.Get(index);
}
inline const ::app::Question& Questions::questions(int index) const {
  // @@protoc_insertion_point(field_get:app.Questions.questions)
  return _internal_questions(index);
}
inline ::app::Question* Questions::_internal_add_questions() {
  return _impl_.questions_.Add();
}
inline ::app::Question* Questions::add_questions() {
  ::app::Question* _add = _internal_add_questions();
  // @@protoc_insertion_point(field_add:app.Questions.questions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::app::Question >&
Questions::questions() const {
  // @@protoc_insertion_point(field_list:app.Questions.questions)
  return _impl_.questions_;
}

// -------------------------------------------------------------------

// Record

// repeated .app.User users = 1;
inline int Record::_internal_users_size() const {
  return _impl_.users_.size();
}
inline int Record::users_size() const {
  return _internal_users_size();
}
inline void Record::clear_users() {
  _impl_.users_.Clear();
}
inline ::app::User* Record::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:app.Record.users)
  return _impl_.users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::app::User >*
Record::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:app.Record.users)
  return &_impl_.users_;
}
inline const ::app::User& Record::_internal_users(int index) const {
  return _impl_.users_.Get(index);
}
inline const ::app::User& Record::users(int index) const {
  // @@protoc_insertion_point(field_get:app.Record.users)
  return _internal_users(index);
}
inline ::app::User* Record::_internal_add_users() {
  return _impl_.users_.Add();
}
inline ::app::User* Record::add_users() {
  ::app::User* _add = _internal_add_users();
  // @@protoc_insertion_point(field_add:app.Record.users)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::app::User >&
Record::users() const {
  // @@protoc_insertion_point(field_list:app.Record.users)
  return _impl_.users_;
}

// repeated .app.Question questions = 2;
inline int Record::_internal_questions_size() const {
  return _impl_.questions_.size();
}
inline int Record::questions_size() const {
  return _internal_questions_size();
}
inline void Record::clear_questions() {
  _impl_.questions_.Clear();
}
inline ::app::Question* Record::mutable_questions(int index) {
  // @@protoc_insertion_point(field_mutable:app.Record.questions)
  return _impl_.questions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::app::Question >*
Record::mutable_questions() {
  // @@protoc_insertion_point(field_mutable_list:app.Record.questions)
  return &_impl_.questions_;
}
inline const ::app::Question& Record::_internal_questions(int index) const {
  return _impl_.questions_.Get(index);
}
inline const ::app::Question& Record::questions(int index) const {
  // @@protoc_insertion_point(field_get:app.Record.questions)
  return _internal_questions(index);
}
inline ::app::Question* Record::_internal_add_questions() {
  return _impl_.questions_.Add();
}
inline ::app::Question* Record::add_questions() {
  ::app::Question* _add = _internal_add_questions();
  // @@protoc_insertion_point(field_add:app.Record.questions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::app::Question >&
Record::questions() const {
  // @@protoc_insertion_point(field_list:app.Record.questions)
  return _impl_.questions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace app

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_app_2eproto
