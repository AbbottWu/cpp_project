// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: app.proto
#ifndef GRPC_app_2eproto__INCLUDED
#define GRPC_app_2eproto__INCLUDED

#include "app.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace app {

class RPCRoute final {
 public:
  static constexpr char const* service_full_name() {
    return "app.RPCRoute";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status register(::grpc::ClientContext* context, const ::app::User& request, ::app::IsOK* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>> Asyncregister(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>>(AsyncregisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>> PrepareAsyncregister(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>>(PrepareAsyncregisterRaw(context, request, cq));
    }
    virtual ::grpc::Status login(::grpc::ClientContext* context, const ::app::User& request, ::app::IsOK* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>> Asynclogin(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>>(AsyncloginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>> PrepareAsynclogin(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>>(PrepareAsyncloginRaw(context, request, cq));
    }
    virtual ::grpc::Status all_questions(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::app::Questions* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::Questions>> Asyncall_questions(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::Questions>>(Asyncall_questionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::Questions>> PrepareAsyncall_questions(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::Questions>>(PrepareAsyncall_questionsRaw(context, request, cq));
    }
    virtual ::grpc::Status my_questions(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::app::Questions* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::Questions>> Asyncmy_questions(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::Questions>>(Asyncmy_questionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::Questions>> PrepareAsyncmy_questions(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::Questions>>(PrepareAsyncmy_questionsRaw(context, request, cq));
    }
    virtual ::grpc::Status ask_question(::grpc::ClientContext* context, const ::app::Question& request, ::app::IsOK* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>> Asyncask_question(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>>(Asyncask_questionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>> PrepareAsyncask_question(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>>(PrepareAsyncask_questionRaw(context, request, cq));
    }
    virtual ::grpc::Status answer_question(::grpc::ClientContext* context, const ::app::Question& request, ::app::IsOK* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>> Asyncanswer_question(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>>(Asyncanswer_questionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>> PrepareAsyncanswer_question(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>>(PrepareAsyncanswer_questionRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void register(::grpc::ClientContext* context, const ::app::User* request, ::app::IsOK* response, std::function<void(::grpc::Status)>) = 0;
      virtual void register(::grpc::ClientContext* context, const ::app::User* request, ::app::IsOK* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void login(::grpc::ClientContext* context, const ::app::User* request, ::app::IsOK* response, std::function<void(::grpc::Status)>) = 0;
      virtual void login(::grpc::ClientContext* context, const ::app::User* request, ::app::IsOK* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void all_questions(::grpc::ClientContext* context, const ::app::RequestQuestions* request, ::app::Questions* response, std::function<void(::grpc::Status)>) = 0;
      virtual void all_questions(::grpc::ClientContext* context, const ::app::RequestQuestions* request, ::app::Questions* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void my_questions(::grpc::ClientContext* context, const ::app::RequestQuestions* request, ::app::Questions* response, std::function<void(::grpc::Status)>) = 0;
      virtual void my_questions(::grpc::ClientContext* context, const ::app::RequestQuestions* request, ::app::Questions* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ask_question(::grpc::ClientContext* context, const ::app::Question* request, ::app::IsOK* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ask_question(::grpc::ClientContext* context, const ::app::Question* request, ::app::IsOK* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void answer_question(::grpc::ClientContext* context, const ::app::Question* request, ::app::IsOK* response, std::function<void(::grpc::Status)>) = 0;
      virtual void answer_question(::grpc::ClientContext* context, const ::app::Question* request, ::app::IsOK* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>* AsyncregisterRaw(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>* PrepareAsyncregisterRaw(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>* AsyncloginRaw(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>* PrepareAsyncloginRaw(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::app::Questions>* Asyncall_questionsRaw(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::app::Questions>* PrepareAsyncall_questionsRaw(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::app::Questions>* Asyncmy_questionsRaw(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::app::Questions>* PrepareAsyncmy_questionsRaw(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>* Asyncask_questionRaw(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>* PrepareAsyncask_questionRaw(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>* Asyncanswer_questionRaw(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>* PrepareAsyncanswer_questionRaw(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status register(::grpc::ClientContext* context, const ::app::User& request, ::app::IsOK* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>> Asyncregister(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>>(AsyncregisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>> PrepareAsyncregister(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>>(PrepareAsyncregisterRaw(context, request, cq));
    }
    ::grpc::Status login(::grpc::ClientContext* context, const ::app::User& request, ::app::IsOK* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>> Asynclogin(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>>(AsyncloginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>> PrepareAsynclogin(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>>(PrepareAsyncloginRaw(context, request, cq));
    }
    ::grpc::Status all_questions(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::app::Questions* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::Questions>> Asyncall_questions(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::Questions>>(Asyncall_questionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::Questions>> PrepareAsyncall_questions(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::Questions>>(PrepareAsyncall_questionsRaw(context, request, cq));
    }
    ::grpc::Status my_questions(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::app::Questions* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::Questions>> Asyncmy_questions(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::Questions>>(Asyncmy_questionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::Questions>> PrepareAsyncmy_questions(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::Questions>>(PrepareAsyncmy_questionsRaw(context, request, cq));
    }
    ::grpc::Status ask_question(::grpc::ClientContext* context, const ::app::Question& request, ::app::IsOK* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>> Asyncask_question(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>>(Asyncask_questionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>> PrepareAsyncask_question(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>>(PrepareAsyncask_questionRaw(context, request, cq));
    }
    ::grpc::Status answer_question(::grpc::ClientContext* context, const ::app::Question& request, ::app::IsOK* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>> Asyncanswer_question(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>>(Asyncanswer_questionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>> PrepareAsyncanswer_question(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>>(PrepareAsyncanswer_questionRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void register(::grpc::ClientContext* context, const ::app::User* request, ::app::IsOK* response, std::function<void(::grpc::Status)>) override;
      void register(::grpc::ClientContext* context, const ::app::User* request, ::app::IsOK* response, ::grpc::ClientUnaryReactor* reactor) override;
      void login(::grpc::ClientContext* context, const ::app::User* request, ::app::IsOK* response, std::function<void(::grpc::Status)>) override;
      void login(::grpc::ClientContext* context, const ::app::User* request, ::app::IsOK* response, ::grpc::ClientUnaryReactor* reactor) override;
      void all_questions(::grpc::ClientContext* context, const ::app::RequestQuestions* request, ::app::Questions* response, std::function<void(::grpc::Status)>) override;
      void all_questions(::grpc::ClientContext* context, const ::app::RequestQuestions* request, ::app::Questions* response, ::grpc::ClientUnaryReactor* reactor) override;
      void my_questions(::grpc::ClientContext* context, const ::app::RequestQuestions* request, ::app::Questions* response, std::function<void(::grpc::Status)>) override;
      void my_questions(::grpc::ClientContext* context, const ::app::RequestQuestions* request, ::app::Questions* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ask_question(::grpc::ClientContext* context, const ::app::Question* request, ::app::IsOK* response, std::function<void(::grpc::Status)>) override;
      void ask_question(::grpc::ClientContext* context, const ::app::Question* request, ::app::IsOK* response, ::grpc::ClientUnaryReactor* reactor) override;
      void answer_question(::grpc::ClientContext* context, const ::app::Question* request, ::app::IsOK* response, std::function<void(::grpc::Status)>) override;
      void answer_question(::grpc::ClientContext* context, const ::app::Question* request, ::app::IsOK* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::app::IsOK>* AsyncregisterRaw(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::app::IsOK>* PrepareAsyncregisterRaw(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::app::IsOK>* AsyncloginRaw(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::app::IsOK>* PrepareAsyncloginRaw(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::app::Questions>* Asyncall_questionsRaw(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::app::Questions>* PrepareAsyncall_questionsRaw(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::app::Questions>* Asyncmy_questionsRaw(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::app::Questions>* PrepareAsyncmy_questionsRaw(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::app::IsOK>* Asyncask_questionRaw(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::app::IsOK>* PrepareAsyncask_questionRaw(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::app::IsOK>* Asyncanswer_questionRaw(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::app::IsOK>* PrepareAsyncanswer_questionRaw(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_register_;
    const ::grpc::internal::RpcMethod rpcmethod_login_;
    const ::grpc::internal::RpcMethod rpcmethod_all_questions_;
    const ::grpc::internal::RpcMethod rpcmethod_my_questions_;
    const ::grpc::internal::RpcMethod rpcmethod_ask_question_;
    const ::grpc::internal::RpcMethod rpcmethod_answer_question_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status register(::grpc::ServerContext* context, const ::app::User* request, ::app::IsOK* response);
    virtual ::grpc::Status login(::grpc::ServerContext* context, const ::app::User* request, ::app::IsOK* response);
    virtual ::grpc::Status all_questions(::grpc::ServerContext* context, const ::app::RequestQuestions* request, ::app::Questions* response);
    virtual ::grpc::Status my_questions(::grpc::ServerContext* context, const ::app::RequestQuestions* request, ::app::Questions* response);
    virtual ::grpc::Status ask_question(::grpc::ServerContext* context, const ::app::Question* request, ::app::IsOK* response);
    virtual ::grpc::Status answer_question(::grpc::ServerContext* context, const ::app::Question* request, ::app::IsOK* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_register() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register(::grpc::ServerContext* /*context*/, const ::app::User* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestregister(::grpc::ServerContext* context, ::app::User* request, ::grpc::ServerAsyncResponseWriter< ::app::IsOK>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_login() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::app::User* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogin(::grpc::ServerContext* context, ::app::User* request, ::grpc::ServerAsyncResponseWriter< ::app::IsOK>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_all_questions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_all_questions() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_all_questions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status all_questions(::grpc::ServerContext* /*context*/, const ::app::RequestQuestions* /*request*/, ::app::Questions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestall_questions(::grpc::ServerContext* context, ::app::RequestQuestions* request, ::grpc::ServerAsyncResponseWriter< ::app::Questions>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_my_questions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_my_questions() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_my_questions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status my_questions(::grpc::ServerContext* /*context*/, const ::app::RequestQuestions* /*request*/, ::app::Questions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestmy_questions(::grpc::ServerContext* context, ::app::RequestQuestions* request, ::grpc::ServerAsyncResponseWriter< ::app::Questions>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ask_question : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ask_question() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ask_question() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ask_question(::grpc::ServerContext* /*context*/, const ::app::Question* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestask_question(::grpc::ServerContext* context, ::app::Question* request, ::grpc::ServerAsyncResponseWriter< ::app::IsOK>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_answer_question : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_answer_question() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_answer_question() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status answer_question(::grpc::ServerContext* /*context*/, const ::app::Question* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestanswer_question(::grpc::ServerContext* context, ::app::Question* request, ::grpc::ServerAsyncResponseWriter< ::app::IsOK>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_register<WithAsyncMethod_login<WithAsyncMethod_all_questions<WithAsyncMethod_my_questions<WithAsyncMethod_ask_question<WithAsyncMethod_answer_question<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_register() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::app::User, ::app::IsOK>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::app::User* request, ::app::IsOK* response) { return this->register(context, request, response); }));}
    void SetMessageAllocatorFor_register(
        ::grpc::MessageAllocator< ::app::User, ::app::IsOK>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::app::User, ::app::IsOK>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register(::grpc::ServerContext* /*context*/, const ::app::User* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* register(
      ::grpc::CallbackServerContext* /*context*/, const ::app::User* /*request*/, ::app::IsOK* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_login() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::app::User, ::app::IsOK>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::app::User* request, ::app::IsOK* response) { return this->login(context, request, response); }));}
    void SetMessageAllocatorFor_login(
        ::grpc::MessageAllocator< ::app::User, ::app::IsOK>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::app::User, ::app::IsOK>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::app::User* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* login(
      ::grpc::CallbackServerContext* /*context*/, const ::app::User* /*request*/, ::app::IsOK* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_all_questions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_all_questions() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::app::RequestQuestions, ::app::Questions>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::app::RequestQuestions* request, ::app::Questions* response) { return this->all_questions(context, request, response); }));}
    void SetMessageAllocatorFor_all_questions(
        ::grpc::MessageAllocator< ::app::RequestQuestions, ::app::Questions>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::app::RequestQuestions, ::app::Questions>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_all_questions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status all_questions(::grpc::ServerContext* /*context*/, const ::app::RequestQuestions* /*request*/, ::app::Questions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* all_questions(
      ::grpc::CallbackServerContext* /*context*/, const ::app::RequestQuestions* /*request*/, ::app::Questions* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_my_questions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_my_questions() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::app::RequestQuestions, ::app::Questions>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::app::RequestQuestions* request, ::app::Questions* response) { return this->my_questions(context, request, response); }));}
    void SetMessageAllocatorFor_my_questions(
        ::grpc::MessageAllocator< ::app::RequestQuestions, ::app::Questions>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::app::RequestQuestions, ::app::Questions>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_my_questions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status my_questions(::grpc::ServerContext* /*context*/, const ::app::RequestQuestions* /*request*/, ::app::Questions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* my_questions(
      ::grpc::CallbackServerContext* /*context*/, const ::app::RequestQuestions* /*request*/, ::app::Questions* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ask_question : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ask_question() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::app::Question, ::app::IsOK>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::app::Question* request, ::app::IsOK* response) { return this->ask_question(context, request, response); }));}
    void SetMessageAllocatorFor_ask_question(
        ::grpc::MessageAllocator< ::app::Question, ::app::IsOK>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::app::Question, ::app::IsOK>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ask_question() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ask_question(::grpc::ServerContext* /*context*/, const ::app::Question* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ask_question(
      ::grpc::CallbackServerContext* /*context*/, const ::app::Question* /*request*/, ::app::IsOK* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_answer_question : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_answer_question() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::app::Question, ::app::IsOK>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::app::Question* request, ::app::IsOK* response) { return this->answer_question(context, request, response); }));}
    void SetMessageAllocatorFor_answer_question(
        ::grpc::MessageAllocator< ::app::Question, ::app::IsOK>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::app::Question, ::app::IsOK>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_answer_question() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status answer_question(::grpc::ServerContext* /*context*/, const ::app::Question* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* answer_question(
      ::grpc::CallbackServerContext* /*context*/, const ::app::Question* /*request*/, ::app::IsOK* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_register<WithCallbackMethod_login<WithCallbackMethod_all_questions<WithCallbackMethod_my_questions<WithCallbackMethod_ask_question<WithCallbackMethod_answer_question<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_register() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register(::grpc::ServerContext* /*context*/, const ::app::User* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_login() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::app::User* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_all_questions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_all_questions() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_all_questions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status all_questions(::grpc::ServerContext* /*context*/, const ::app::RequestQuestions* /*request*/, ::app::Questions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_my_questions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_my_questions() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_my_questions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status my_questions(::grpc::ServerContext* /*context*/, const ::app::RequestQuestions* /*request*/, ::app::Questions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ask_question : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ask_question() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ask_question() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ask_question(::grpc::ServerContext* /*context*/, const ::app::Question* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_answer_question : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_answer_question() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_answer_question() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status answer_question(::grpc::ServerContext* /*context*/, const ::app::Question* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_register() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register(::grpc::ServerContext* /*context*/, const ::app::User* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestregister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_login() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::app::User* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_all_questions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_all_questions() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_all_questions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status all_questions(::grpc::ServerContext* /*context*/, const ::app::RequestQuestions* /*request*/, ::app::Questions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestall_questions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_my_questions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_my_questions() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_my_questions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status my_questions(::grpc::ServerContext* /*context*/, const ::app::RequestQuestions* /*request*/, ::app::Questions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestmy_questions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ask_question : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ask_question() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ask_question() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ask_question(::grpc::ServerContext* /*context*/, const ::app::Question* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestask_question(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_answer_question : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_answer_question() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_answer_question() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status answer_question(::grpc::ServerContext* /*context*/, const ::app::Question* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestanswer_question(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_register() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->register(context, request, response); }));
    }
    ~WithRawCallbackMethod_register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register(::grpc::ServerContext* /*context*/, const ::app::User* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* register(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_login() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->login(context, request, response); }));
    }
    ~WithRawCallbackMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::app::User* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_all_questions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_all_questions() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->all_questions(context, request, response); }));
    }
    ~WithRawCallbackMethod_all_questions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status all_questions(::grpc::ServerContext* /*context*/, const ::app::RequestQuestions* /*request*/, ::app::Questions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* all_questions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_my_questions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_my_questions() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->my_questions(context, request, response); }));
    }
    ~WithRawCallbackMethod_my_questions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status my_questions(::grpc::ServerContext* /*context*/, const ::app::RequestQuestions* /*request*/, ::app::Questions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* my_questions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ask_question : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ask_question() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ask_question(context, request, response); }));
    }
    ~WithRawCallbackMethod_ask_question() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ask_question(::grpc::ServerContext* /*context*/, const ::app::Question* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ask_question(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_answer_question : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_answer_question() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->answer_question(context, request, response); }));
    }
    ~WithRawCallbackMethod_answer_question() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status answer_question(::grpc::ServerContext* /*context*/, const ::app::Question* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* answer_question(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_register() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::app::User, ::app::IsOK>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::app::User, ::app::IsOK>* streamer) {
                       return this->Streamedregister(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status register(::grpc::ServerContext* /*context*/, const ::app::User* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedregister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::app::User,::app::IsOK>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_login() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::app::User, ::app::IsOK>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::app::User, ::app::IsOK>* streamer) {
                       return this->Streamedlogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status login(::grpc::ServerContext* /*context*/, const ::app::User* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedlogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::app::User,::app::IsOK>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_all_questions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_all_questions() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::app::RequestQuestions, ::app::Questions>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::app::RequestQuestions, ::app::Questions>* streamer) {
                       return this->Streamedall_questions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_all_questions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status all_questions(::grpc::ServerContext* /*context*/, const ::app::RequestQuestions* /*request*/, ::app::Questions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedall_questions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::app::RequestQuestions,::app::Questions>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_my_questions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_my_questions() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::app::RequestQuestions, ::app::Questions>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::app::RequestQuestions, ::app::Questions>* streamer) {
                       return this->Streamedmy_questions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_my_questions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status my_questions(::grpc::ServerContext* /*context*/, const ::app::RequestQuestions* /*request*/, ::app::Questions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedmy_questions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::app::RequestQuestions,::app::Questions>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ask_question : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ask_question() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::app::Question, ::app::IsOK>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::app::Question, ::app::IsOK>* streamer) {
                       return this->Streamedask_question(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ask_question() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ask_question(::grpc::ServerContext* /*context*/, const ::app::Question* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedask_question(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::app::Question,::app::IsOK>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_answer_question : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_answer_question() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::app::Question, ::app::IsOK>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::app::Question, ::app::IsOK>* streamer) {
                       return this->Streamedanswer_question(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_answer_question() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status answer_question(::grpc::ServerContext* /*context*/, const ::app::Question* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedanswer_question(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::app::Question,::app::IsOK>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_register<WithStreamedUnaryMethod_login<WithStreamedUnaryMethod_all_questions<WithStreamedUnaryMethod_my_questions<WithStreamedUnaryMethod_ask_question<WithStreamedUnaryMethod_answer_question<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_register<WithStreamedUnaryMethod_login<WithStreamedUnaryMethod_all_questions<WithStreamedUnaryMethod_my_questions<WithStreamedUnaryMethod_ask_question<WithStreamedUnaryMethod_answer_question<Service > > > > > > StreamedService;
};

}  // namespace app


#endif  // GRPC_app_2eproto__INCLUDED
