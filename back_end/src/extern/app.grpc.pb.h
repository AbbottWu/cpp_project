// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: app.proto
#ifndef GRPC_app_2eproto__INCLUDED
#define GRPC_app_2eproto__INCLUDED

#include "app.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace app {

class RPCRoute final {
 public:
  static constexpr char const* service_full_name() {
    return "app.RPCRoute";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SignUp(::grpc::ClientContext* context, const ::app::User& request, ::app::IsOK* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>> AsyncSignUp(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>>(AsyncSignUpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>> PrepareAsyncSignUp(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>>(PrepareAsyncSignUpRaw(context, request, cq));
    }
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::app::User& request, ::app::IsOK* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>> AsyncLogin(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status AllQuestions(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::app::Questions* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::Questions>> AsyncAllQuestions(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::Questions>>(AsyncAllQuestionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::Questions>> PrepareAsyncAllQuestions(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::Questions>>(PrepareAsyncAllQuestionsRaw(context, request, cq));
    }
    virtual ::grpc::Status MyQuestions(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::app::Questions* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::Questions>> AsyncMyQuestions(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::Questions>>(AsyncMyQuestionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::Questions>> PrepareAsyncMyQuestions(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::Questions>>(PrepareAsyncMyQuestionsRaw(context, request, cq));
    }
    virtual ::grpc::Status AskQuestion(::grpc::ClientContext* context, const ::app::Question& request, ::app::IsOK* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>> AsyncAskQuestion(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>>(AsyncAskQuestionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>> PrepareAsyncAskQuestion(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>>(PrepareAsyncAskQuestionRaw(context, request, cq));
    }
    virtual ::grpc::Status AnswerQuestion(::grpc::ClientContext* context, const ::app::Question& request, ::app::IsOK* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>> AsyncAnswerQuestion(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>>(AsyncAnswerQuestionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>> PrepareAsyncAnswerQuestion(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>>(PrepareAsyncAnswerQuestionRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SignUp(::grpc::ClientContext* context, const ::app::User* request, ::app::IsOK* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SignUp(::grpc::ClientContext* context, const ::app::User* request, ::app::IsOK* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::app::User* request, ::app::IsOK* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::app::User* request, ::app::IsOK* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AllQuestions(::grpc::ClientContext* context, const ::app::RequestQuestions* request, ::app::Questions* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AllQuestions(::grpc::ClientContext* context, const ::app::RequestQuestions* request, ::app::Questions* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void MyQuestions(::grpc::ClientContext* context, const ::app::RequestQuestions* request, ::app::Questions* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MyQuestions(::grpc::ClientContext* context, const ::app::RequestQuestions* request, ::app::Questions* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AskQuestion(::grpc::ClientContext* context, const ::app::Question* request, ::app::IsOK* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AskQuestion(::grpc::ClientContext* context, const ::app::Question* request, ::app::IsOK* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AnswerQuestion(::grpc::ClientContext* context, const ::app::Question* request, ::app::IsOK* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AnswerQuestion(::grpc::ClientContext* context, const ::app::Question* request, ::app::IsOK* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>* AsyncSignUpRaw(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>* PrepareAsyncSignUpRaw(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>* AsyncLoginRaw(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::app::Questions>* AsyncAllQuestionsRaw(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::app::Questions>* PrepareAsyncAllQuestionsRaw(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::app::Questions>* AsyncMyQuestionsRaw(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::app::Questions>* PrepareAsyncMyQuestionsRaw(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>* AsyncAskQuestionRaw(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>* PrepareAsyncAskQuestionRaw(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>* AsyncAnswerQuestionRaw(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::app::IsOK>* PrepareAsyncAnswerQuestionRaw(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SignUp(::grpc::ClientContext* context, const ::app::User& request, ::app::IsOK* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>> AsyncSignUp(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>>(AsyncSignUpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>> PrepareAsyncSignUp(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>>(PrepareAsyncSignUpRaw(context, request, cq));
    }
    ::grpc::Status Login(::grpc::ClientContext* context, const ::app::User& request, ::app::IsOK* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>> AsyncLogin(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    ::grpc::Status AllQuestions(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::app::Questions* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::Questions>> AsyncAllQuestions(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::Questions>>(AsyncAllQuestionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::Questions>> PrepareAsyncAllQuestions(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::Questions>>(PrepareAsyncAllQuestionsRaw(context, request, cq));
    }
    ::grpc::Status MyQuestions(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::app::Questions* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::Questions>> AsyncMyQuestions(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::Questions>>(AsyncMyQuestionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::Questions>> PrepareAsyncMyQuestions(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::Questions>>(PrepareAsyncMyQuestionsRaw(context, request, cq));
    }
    ::grpc::Status AskQuestion(::grpc::ClientContext* context, const ::app::Question& request, ::app::IsOK* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>> AsyncAskQuestion(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>>(AsyncAskQuestionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>> PrepareAsyncAskQuestion(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>>(PrepareAsyncAskQuestionRaw(context, request, cq));
    }
    ::grpc::Status AnswerQuestion(::grpc::ClientContext* context, const ::app::Question& request, ::app::IsOK* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>> AsyncAnswerQuestion(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>>(AsyncAnswerQuestionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>> PrepareAsyncAnswerQuestion(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::app::IsOK>>(PrepareAsyncAnswerQuestionRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SignUp(::grpc::ClientContext* context, const ::app::User* request, ::app::IsOK* response, std::function<void(::grpc::Status)>) override;
      void SignUp(::grpc::ClientContext* context, const ::app::User* request, ::app::IsOK* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Login(::grpc::ClientContext* context, const ::app::User* request, ::app::IsOK* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::app::User* request, ::app::IsOK* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AllQuestions(::grpc::ClientContext* context, const ::app::RequestQuestions* request, ::app::Questions* response, std::function<void(::grpc::Status)>) override;
      void AllQuestions(::grpc::ClientContext* context, const ::app::RequestQuestions* request, ::app::Questions* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MyQuestions(::grpc::ClientContext* context, const ::app::RequestQuestions* request, ::app::Questions* response, std::function<void(::grpc::Status)>) override;
      void MyQuestions(::grpc::ClientContext* context, const ::app::RequestQuestions* request, ::app::Questions* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AskQuestion(::grpc::ClientContext* context, const ::app::Question* request, ::app::IsOK* response, std::function<void(::grpc::Status)>) override;
      void AskQuestion(::grpc::ClientContext* context, const ::app::Question* request, ::app::IsOK* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AnswerQuestion(::grpc::ClientContext* context, const ::app::Question* request, ::app::IsOK* response, std::function<void(::grpc::Status)>) override;
      void AnswerQuestion(::grpc::ClientContext* context, const ::app::Question* request, ::app::IsOK* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::app::IsOK>* AsyncSignUpRaw(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::app::IsOK>* PrepareAsyncSignUpRaw(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::app::IsOK>* AsyncLoginRaw(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::app::IsOK>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::app::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::app::Questions>* AsyncAllQuestionsRaw(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::app::Questions>* PrepareAsyncAllQuestionsRaw(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::app::Questions>* AsyncMyQuestionsRaw(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::app::Questions>* PrepareAsyncMyQuestionsRaw(::grpc::ClientContext* context, const ::app::RequestQuestions& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::app::IsOK>* AsyncAskQuestionRaw(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::app::IsOK>* PrepareAsyncAskQuestionRaw(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::app::IsOK>* AsyncAnswerQuestionRaw(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::app::IsOK>* PrepareAsyncAnswerQuestionRaw(::grpc::ClientContext* context, const ::app::Question& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SignUp_;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
    const ::grpc::internal::RpcMethod rpcmethod_AllQuestions_;
    const ::grpc::internal::RpcMethod rpcmethod_MyQuestions_;
    const ::grpc::internal::RpcMethod rpcmethod_AskQuestion_;
    const ::grpc::internal::RpcMethod rpcmethod_AnswerQuestion_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SignUp(::grpc::ServerContext* context, const ::app::User* request, ::app::IsOK* response);
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::app::User* request, ::app::IsOK* response);
    virtual ::grpc::Status AllQuestions(::grpc::ServerContext* context, const ::app::RequestQuestions* request, ::app::Questions* response);
    virtual ::grpc::Status MyQuestions(::grpc::ServerContext* context, const ::app::RequestQuestions* request, ::app::Questions* response);
    virtual ::grpc::Status AskQuestion(::grpc::ServerContext* context, const ::app::Question* request, ::app::IsOK* response);
    virtual ::grpc::Status AnswerQuestion(::grpc::ServerContext* context, const ::app::Question* request, ::app::IsOK* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SignUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SignUp() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SignUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignUp(::grpc::ServerContext* /*context*/, const ::app::User* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignUp(::grpc::ServerContext* context, ::app::User* request, ::grpc::ServerAsyncResponseWriter< ::app::IsOK>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::app::User* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::app::User* request, ::grpc::ServerAsyncResponseWriter< ::app::IsOK>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AllQuestions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AllQuestions() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_AllQuestions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllQuestions(::grpc::ServerContext* /*context*/, const ::app::RequestQuestions* /*request*/, ::app::Questions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAllQuestions(::grpc::ServerContext* context, ::app::RequestQuestions* request, ::grpc::ServerAsyncResponseWriter< ::app::Questions>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MyQuestions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MyQuestions() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_MyQuestions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MyQuestions(::grpc::ServerContext* /*context*/, const ::app::RequestQuestions* /*request*/, ::app::Questions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMyQuestions(::grpc::ServerContext* context, ::app::RequestQuestions* request, ::grpc::ServerAsyncResponseWriter< ::app::Questions>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AskQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AskQuestion() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_AskQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AskQuestion(::grpc::ServerContext* /*context*/, const ::app::Question* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAskQuestion(::grpc::ServerContext* context, ::app::Question* request, ::grpc::ServerAsyncResponseWriter< ::app::IsOK>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AnswerQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AnswerQuestion() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_AnswerQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnswerQuestion(::grpc::ServerContext* /*context*/, const ::app::Question* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAnswerQuestion(::grpc::ServerContext* context, ::app::Question* request, ::grpc::ServerAsyncResponseWriter< ::app::IsOK>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SignUp<WithAsyncMethod_Login<WithAsyncMethod_AllQuestions<WithAsyncMethod_MyQuestions<WithAsyncMethod_AskQuestion<WithAsyncMethod_AnswerQuestion<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SignUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SignUp() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::app::User, ::app::IsOK>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::app::User* request, ::app::IsOK* response) { return this->SignUp(context, request, response); }));}
    void SetMessageAllocatorFor_SignUp(
        ::grpc::MessageAllocator< ::app::User, ::app::IsOK>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::app::User, ::app::IsOK>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SignUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignUp(::grpc::ServerContext* /*context*/, const ::app::User* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SignUp(
      ::grpc::CallbackServerContext* /*context*/, const ::app::User* /*request*/, ::app::IsOK* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Login() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::app::User, ::app::IsOK>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::app::User* request, ::app::IsOK* response) { return this->Login(context, request, response); }));}
    void SetMessageAllocatorFor_Login(
        ::grpc::MessageAllocator< ::app::User, ::app::IsOK>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::app::User, ::app::IsOK>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::app::User* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::app::User* /*request*/, ::app::IsOK* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AllQuestions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AllQuestions() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::app::RequestQuestions, ::app::Questions>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::app::RequestQuestions* request, ::app::Questions* response) { return this->AllQuestions(context, request, response); }));}
    void SetMessageAllocatorFor_AllQuestions(
        ::grpc::MessageAllocator< ::app::RequestQuestions, ::app::Questions>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::app::RequestQuestions, ::app::Questions>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AllQuestions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllQuestions(::grpc::ServerContext* /*context*/, const ::app::RequestQuestions* /*request*/, ::app::Questions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AllQuestions(
      ::grpc::CallbackServerContext* /*context*/, const ::app::RequestQuestions* /*request*/, ::app::Questions* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MyQuestions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MyQuestions() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::app::RequestQuestions, ::app::Questions>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::app::RequestQuestions* request, ::app::Questions* response) { return this->MyQuestions(context, request, response); }));}
    void SetMessageAllocatorFor_MyQuestions(
        ::grpc::MessageAllocator< ::app::RequestQuestions, ::app::Questions>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::app::RequestQuestions, ::app::Questions>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MyQuestions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MyQuestions(::grpc::ServerContext* /*context*/, const ::app::RequestQuestions* /*request*/, ::app::Questions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MyQuestions(
      ::grpc::CallbackServerContext* /*context*/, const ::app::RequestQuestions* /*request*/, ::app::Questions* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AskQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AskQuestion() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::app::Question, ::app::IsOK>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::app::Question* request, ::app::IsOK* response) { return this->AskQuestion(context, request, response); }));}
    void SetMessageAllocatorFor_AskQuestion(
        ::grpc::MessageAllocator< ::app::Question, ::app::IsOK>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::app::Question, ::app::IsOK>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AskQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AskQuestion(::grpc::ServerContext* /*context*/, const ::app::Question* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AskQuestion(
      ::grpc::CallbackServerContext* /*context*/, const ::app::Question* /*request*/, ::app::IsOK* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AnswerQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AnswerQuestion() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::app::Question, ::app::IsOK>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::app::Question* request, ::app::IsOK* response) { return this->AnswerQuestion(context, request, response); }));}
    void SetMessageAllocatorFor_AnswerQuestion(
        ::grpc::MessageAllocator< ::app::Question, ::app::IsOK>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::app::Question, ::app::IsOK>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AnswerQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnswerQuestion(::grpc::ServerContext* /*context*/, const ::app::Question* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AnswerQuestion(
      ::grpc::CallbackServerContext* /*context*/, const ::app::Question* /*request*/, ::app::IsOK* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SignUp<WithCallbackMethod_Login<WithCallbackMethod_AllQuestions<WithCallbackMethod_MyQuestions<WithCallbackMethod_AskQuestion<WithCallbackMethod_AnswerQuestion<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SignUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SignUp() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SignUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignUp(::grpc::ServerContext* /*context*/, const ::app::User* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::app::User* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AllQuestions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AllQuestions() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_AllQuestions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllQuestions(::grpc::ServerContext* /*context*/, const ::app::RequestQuestions* /*request*/, ::app::Questions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MyQuestions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MyQuestions() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_MyQuestions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MyQuestions(::grpc::ServerContext* /*context*/, const ::app::RequestQuestions* /*request*/, ::app::Questions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AskQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AskQuestion() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_AskQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AskQuestion(::grpc::ServerContext* /*context*/, const ::app::Question* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AnswerQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AnswerQuestion() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_AnswerQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnswerQuestion(::grpc::ServerContext* /*context*/, const ::app::Question* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SignUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SignUp() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SignUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignUp(::grpc::ServerContext* /*context*/, const ::app::User* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignUp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::app::User* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AllQuestions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AllQuestions() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_AllQuestions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllQuestions(::grpc::ServerContext* /*context*/, const ::app::RequestQuestions* /*request*/, ::app::Questions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAllQuestions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MyQuestions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MyQuestions() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_MyQuestions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MyQuestions(::grpc::ServerContext* /*context*/, const ::app::RequestQuestions* /*request*/, ::app::Questions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMyQuestions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AskQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AskQuestion() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_AskQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AskQuestion(::grpc::ServerContext* /*context*/, const ::app::Question* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAskQuestion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AnswerQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AnswerQuestion() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_AnswerQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnswerQuestion(::grpc::ServerContext* /*context*/, const ::app::Question* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAnswerQuestion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SignUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SignUp() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SignUp(context, request, response); }));
    }
    ~WithRawCallbackMethod_SignUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignUp(::grpc::ServerContext* /*context*/, const ::app::User* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SignUp(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Login() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Login(context, request, response); }));
    }
    ~WithRawCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::app::User* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AllQuestions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AllQuestions() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AllQuestions(context, request, response); }));
    }
    ~WithRawCallbackMethod_AllQuestions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllQuestions(::grpc::ServerContext* /*context*/, const ::app::RequestQuestions* /*request*/, ::app::Questions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AllQuestions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MyQuestions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MyQuestions() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MyQuestions(context, request, response); }));
    }
    ~WithRawCallbackMethod_MyQuestions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MyQuestions(::grpc::ServerContext* /*context*/, const ::app::RequestQuestions* /*request*/, ::app::Questions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MyQuestions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AskQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AskQuestion() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AskQuestion(context, request, response); }));
    }
    ~WithRawCallbackMethod_AskQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AskQuestion(::grpc::ServerContext* /*context*/, const ::app::Question* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AskQuestion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AnswerQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AnswerQuestion() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AnswerQuestion(context, request, response); }));
    }
    ~WithRawCallbackMethod_AnswerQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnswerQuestion(::grpc::ServerContext* /*context*/, const ::app::Question* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AnswerQuestion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SignUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SignUp() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::app::User, ::app::IsOK>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::app::User, ::app::IsOK>* streamer) {
                       return this->StreamedSignUp(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SignUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SignUp(::grpc::ServerContext* /*context*/, const ::app::User* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSignUp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::app::User,::app::IsOK>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::app::User, ::app::IsOK>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::app::User, ::app::IsOK>* streamer) {
                       return this->StreamedLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::app::User* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::app::User,::app::IsOK>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AllQuestions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AllQuestions() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::app::RequestQuestions, ::app::Questions>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::app::RequestQuestions, ::app::Questions>* streamer) {
                       return this->StreamedAllQuestions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AllQuestions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AllQuestions(::grpc::ServerContext* /*context*/, const ::app::RequestQuestions* /*request*/, ::app::Questions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAllQuestions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::app::RequestQuestions,::app::Questions>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MyQuestions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MyQuestions() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::app::RequestQuestions, ::app::Questions>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::app::RequestQuestions, ::app::Questions>* streamer) {
                       return this->StreamedMyQuestions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MyQuestions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MyQuestions(::grpc::ServerContext* /*context*/, const ::app::RequestQuestions* /*request*/, ::app::Questions* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMyQuestions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::app::RequestQuestions,::app::Questions>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AskQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AskQuestion() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::app::Question, ::app::IsOK>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::app::Question, ::app::IsOK>* streamer) {
                       return this->StreamedAskQuestion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AskQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AskQuestion(::grpc::ServerContext* /*context*/, const ::app::Question* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAskQuestion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::app::Question,::app::IsOK>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AnswerQuestion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AnswerQuestion() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::app::Question, ::app::IsOK>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::app::Question, ::app::IsOK>* streamer) {
                       return this->StreamedAnswerQuestion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AnswerQuestion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AnswerQuestion(::grpc::ServerContext* /*context*/, const ::app::Question* /*request*/, ::app::IsOK* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAnswerQuestion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::app::Question,::app::IsOK>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SignUp<WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_AllQuestions<WithStreamedUnaryMethod_MyQuestions<WithStreamedUnaryMethod_AskQuestion<WithStreamedUnaryMethod_AnswerQuestion<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SignUp<WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_AllQuestions<WithStreamedUnaryMethod_MyQuestions<WithStreamedUnaryMethod_AskQuestion<WithStreamedUnaryMethod_AnswerQuestion<Service > > > > > > StreamedService;
};

}  // namespace app


#endif  // GRPC_app_2eproto__INCLUDED
